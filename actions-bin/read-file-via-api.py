"""
File is run by a github action to read and process the new files added by the create-file-via-api.py file.
"""
import sys
import os
import base64
import requests

g_api_key = os.environ["G_READ_API_KEY"]
REPO = sys.argv[1]
FILENAME = sys.argv[2]

if not g_api_key:
    sys.stderr.write("Github API Key is not set")
    sys.exit(1)

if not FILENAME:
    sys.stderr.write(f"Filename value was not set correctly. Filename: {FILENAME}")
    sys.exit(1)

if not REPO:
    sys.stderr.write(f"REPO value was not set correctly. REPO: {REPO}")
    sys.exit(1)

BASE_URL = "https://api.github.com/repos/CVEProject/cve-reference-ingest/contents/"
PATH_ENDING = f"last_run_shas/{REPO}/{FILENAME}"
FULL_GET_URL = BASE_URL + PATH_ENDING

headers = {
    "Accept": "application/vnd.github+json",
    "X-GitHub-Api-Version": "2022-11-28",
    "Authorization": f"Bearer {g_api_key}",
}

try:
    response = requests.get(FULL_GET_URL, headers=headers, timeout=120)
except requests.exceptions.Timeout:
    sys.stderr.write(f"Request to {BASE_URL} timed out")
    sys.exit(1)
except requests.exceptions.ConnectionError:
    sys.stderr.write(f"Error connecting to {BASE_URL}")
    sys.exit(1)
except requests.exceptions.RequestException as e:
    sys.stderr.write(f"Requests Exception {e}")
    sys.exit(1)

status_code = response.status_code

if status_code != 200:
    sys.stderr.write(f"failed to retrieve {PATH_ENDING} via API: {str(status_code)}")
    sys.exit(1)

content = response.json().get("content", None)

if not content:
    sys.stderr.write(f"Network request returned an empty json body. Content: {content}")
    sys.exit(1)


sha = base64.b64decode(content + "\n")
print(sha)
