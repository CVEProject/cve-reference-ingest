"""
File is run by a github action to save processed reference file to save the reference to a MITRE owned ADP.
"""
import sys
import os
import json
import requests


SUBDIRECTORY = sys.argv[1]
REF_DIRECTORY = sys.argv[2]
PATHNAME = sys.argv[3]

if not SUBDIRECTORY:
    sys.stderr.write(f"Subdirectory is not set correctly. Subdirectory: {SUBDIRECTORY}")
    sys.exit(1)

if not REF_DIRECTORY:
    sys.stderr.write(f"Reference Directory is not set correctly. REF_DIRECTORY: {REF_DIRECTORY}")
    sys.exit(1)

if not PATHNAME:
    sys.stderr.write(f"Pathname is not set correctly. Subdirectory: {PATHNAME}")
    sys.exit(1)

with open(PATHNAME, "r", encoding="utf-8") as f:
    obj = json.loads(f.readline())
    reference_url = obj["URL"]
    reference_cve_id = obj["id"]

    # TODO: Move this to env vars possibly?
    headers = {
        "Content-type": "application/json",
        "CVE-API-ORG": "testADPOrg",
        "CVE-API-USER": "fakeUser",
        "CVE-API-KEY": os.environ["A_API_KEY"],
    }

    print("Running on test CVEs only")
    print("Retrieving placeholder for " + reference_cve_id)
    BASE_SERVICES_URL = "https://cveawg-test.mitre.org/api/cve/"

    # url_get = BASE_SERVICES_URL + reference_cve_id
    # for testing, map all references to one of 10 CVE Records
    fake_cve = "CVE-2023-2103" + reference_cve_id[-1]
    CVE_CHECK_URL = BASE_SERVICES_URL + fake_cve
    try:
        request = requests.get(CVE_CHECK_URL, timeout=60)
    except requests.exceptions.Timeout:
        sys.stderr.write(f"Request to {CVE_CHECK_URL} timed out")
        sys.exit(1)
    except requests.exceptions.ConnectionError:
        sys.stderr.write(f"Error connecting to {CVE_CHECK_URL}")
        sys.exit(1)
    except requests.exceptions.RequestException as e:
        sys.stderr.write(f"Requests Exception {e}")
        sys.exit(1)

    request_status_code = request.status_code
    if request_status_code != 200:
        print(f"{reference_cve_id}: GET status {str(request_status_code)} Failed to get record from CVE-services")
        sys.exit(1)

    request_json = request.json()

    print(f"{reference_cve_id}: GET status {str(request_status_code)} for {json.dumps(request_json)}")

    if request_status_code == 404:
        sys.stderr.write(f"{reference_cve_id} not found (may be RBP); cannot add ADP container")
        sys.exit(1)
    elif request_status_code != 200:
        sys.stderr.write(
            f"{reference_cve_id} published record was not successfully retrieved ({request_status_code}); cannot add ADP container"
        )
        sys.exit(1)

    old_adp_container = None

    ref_set = set()
    if "adp" in request_json.get("containers"):
        for container in request_json.get("containers").get("adp"):
            # TODO: Make this be compared to a var at some point.
            if container.get("providerMetadata").get("shortName") == "testADPOrg":
                old_adp_container = container
                for oldref in container.get("references", []):
                    print(f"{reference_cve_id} from ADP: {oldref.get('url')}")
                    ref_set.add(oldref.get("url"))
                # We should stop searching right after, at worst o(n)
                break

    if reference_url not in ref_set:
        print(f"{reference_cve_id}: found reference {reference_url} is new")

        # url_put = s + cve + '/adp'
        # for testing, map all references to one of 10 CVE Records
        url_put = f"{BASE_SERVICES_URL}{fake_cve}/adp"

        if old_adp_container:
            if "references" in old_adp_container:
                old_adp_container["references"].append({"url": reference_url})
            else:
                old_adp_container["references"] = [{"url": reference_url}]

            new_json_data = {"adpContainer": {"references": old_adp_container["references"]}}
        else:
            new_json_data = {"adpContainer": {"references": [{"url": reference_url}]}}

        print(f"{reference_cve_id}: Doing PUT of ADP container {json.dumps(new_json_data)}")
        try:
            put_request = requests.put(url_put, headers=headers, data=json.dumps(new_json_data), timeout=60)
        except requests.exceptions.Timeout:
            sys.stderr.write(f"Request to {url_put} timed out")
            sys.exit(1)
        except requests.exceptions.ConnectionError:
            sys.stderr.write(f"Error connecting to {url_put}")
            sys.exit(1)
        except requests.exceptions.RequestException as e:
            sys.stderr.write(f"Requests Exception {e}")
            sys.exit(1)

        put_request_status_code = put_request.status_code
        if put_request_status_code != 200:
            print(f"{reference_cve_id}: PUT status {str(put_request_status_code)} FAILED")
            sys.exit(1)

        put_request_json_results = put_request.json()

        print(
            f"{reference_cve_id}: PUT status {str(put_request_status_code)} for {json.dumps(put_request_json_results)}"
        )
