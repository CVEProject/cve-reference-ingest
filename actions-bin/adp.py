# pylint: disable=C0301
"""
File is run by a github action to save processed reference file to save the reference to a MITRE owned ADP.
"""

import sys
import os
import json
import requests


def send_get_request(CVE_CHECK_URL):
    get_request_response = None
    try:
        get_request_response = requests.get(CVE_CHECK_URL, timeout=60)
    except requests.exceptions.Timeout:
        print(f"Request to {CVE_CHECK_URL} timed out")
    except requests.exceptions.ConnectionError:
        print(f"Error connecting to {CVE_CHECK_URL}")
    except requests.exceptions.RequestException as exception:
        print(f"Requests Exception {exception}")

    return get_request_response


def send_put_request(url_put, headers, new_json_data):
    put_request_response = None
    try:
        put_request_response = requests.put(url_put, headers=headers, data=json.dumps(new_json_data), timeout=60)
    except requests.exceptions.Timeout:
        print(f"Request to {url_put} timed out")
    except requests.exceptions.ConnectionError:
        print(f"Error connecting to {url_put}")
    except requests.exceptions.RequestException as exception:
        print(f"Requests Exception {exception}")

    return put_request_response


SUBDIRECTORY = sys.argv[1]
REF_DIRECTORY = sys.argv[2]
PATHNAME = sys.argv[3]

if not SUBDIRECTORY:
    print(f"Subdirectory is not set correctly. Subdirectory: {SUBDIRECTORY}")
    sys.exit(1)

if not REF_DIRECTORY:
    print(f"Reference Directory is not set correctly. REF_DIRECTORY: {REF_DIRECTORY}")
    sys.exit(1)

if not PATHNAME:
    print(f"Pathname is not set correctly. Subdirectory: {PATHNAME}")
    sys.exit(1)

with open(PATHNAME, "r", encoding="utf-8") as f:
    try:
        obj = json.loads(f.readline())
    except Exception as e:
        print(f"Failed parsing JSON object: {e}")
        sys.exit(1)
    reference_url = obj["URL"]
    reference_cve_id = obj["id"]

    headers = {
        "Content-type": "application/json",
        "CVE-API-ORG": os.environ["CVE-API-ORG"],
        "CVE-API-USER": os.environ["CVE-API-USER"],
        "CVE-API-KEY": os.environ["A_API_KEY"],
    }

    print("Retrieving placeholder for " + reference_cve_id)
    BASE_SERVICES_URL = os.environ["SERVICES_URL"]

    CVE_CHECK_URL = BASE_SERVICES_URL + reference_cve_id

    # First attempt at
    request = send_get_request(CVE_CHECK_URL=CVE_CHECK_URL)
    print(f"request: {request.status_code}, {CVE_CHECK_URL}, {request.text}")
    # This is very verbose, but this code should be clear and easy to follow.
    # If first request fails for network issues, do a quick retry. As per content team's request
    # Need to check for None or 500 status code (ensure to check the request object first, so we don't unwrap a None).
    if not request or request.status_code == 500:
        print(f"{reference_cve_id}: GET Failed to get record from CVE-services for networks issues. Retrying")
        request = send_get_request(CVE_CHECK_URL=CVE_CHECK_URL)
        # Second request attempt did not return a request object, this is failure.
        if not request:
            print(f"{reference_cve_id}: GET Failed to get record from CVE-services twice for network issues. EXITING")
            sys.exit(1)

        # Second request attempt returned a request object, but we want to check the status code.
        # Logging again to ensure we know it is the second attempt for debugging purposes.
        if request.status_code == 500:
            print(f"{reference_cve_id}: GET Failed to get record from CVE-services twice for 500 status code. EXITING")
            sys.exit(1)
        if request.status_code == 200 and request.json().get("cveMetadata", {}).get("state") == "REJECTED":
            print(
                "On second request found the CVE Record for the CVE ID is in the REJECTED state and cannot have an ADP container."
            )
            sys.exit(1)
        if request.status_code == 404 and "CVE_RECORD_DNE" in request.text:
            print("On second request found the cve record for the cve id does not exist.")
            sys.exit(1)
    else:
        # First Request returned and it has a status code not 500, need to check between 200 and 404 for correct state management and debug output.
        if request.status_code == 200 and request.json().get("cveMetadata", {}).get("state") == "REJECTED":
            print("The CVE Record for the CVE ID is in the REJECTED state and cannot have an ADP container.")
            sys.exit(1)
        if request.status_code == 404 and "CVE_RECORD_DNE" in request.text:
            print("The cve record for the cve id does not exist.")
            sys.exit(1)

    request_status_code = request.status_code
    # This check is a failsafe, we should never fail here, but just in case.
    if request_status_code != 200:
        print(
            f"{reference_cve_id}: GET status {str(request_status_code)} Failed to get record CVE-services for a bad status code."
        )
        sys.exit(1)

    # Request should have a valid CVE object
    request_json = request.json()

    print(f"{reference_cve_id}: GET status {str(request_status_code)} for {json.dumps(request_json)}")

    old_adp_container = None

    ref_set = set()

    if "cna" in request_json.get("containers"):
        cna_references = request_json.get("containers").get("cna").get("references", [])
        for cna_reference in cna_references:
            print(f"{reference_cve_id} from CNA: {cna_reference.get('url')}")
            ref_set.add(cna_reference.get("url"))

    if "adp" in request_json.get("containers"):
        for container in request_json.get("containers").get("adp"):
            if container.get("providerMetadata").get("shortName") == os.environ["CVE-API-ORG"]:
                old_adp_container = container
                for oldref in container.get("references", []):
                    print(f"{reference_cve_id} from ADP: {oldref.get('url')}")
                    ref_set.add(oldref.get("url"))
                # We should stop searching right after, at worst o(n)
                break
    REQUIRE_PUT = False
    url_put = f"{BASE_SERVICES_URL}{reference_cve_id}/adp"
    if reference_url not in ref_set:
        print(f"{reference_cve_id}: found reference {reference_url} is new")

        if old_adp_container:
            if "references" in old_adp_container:
                old_adp_container["references"].append({"url": reference_url})
            else:
                old_adp_container["references"] = [{"url": reference_url}]

            new_json_data = {"adpContainer": {"title": "Secretariat Program Container","references": old_adp_container["references"]}}
        else:
            new_json_data = {"adpContainer": {"title": "Secretariat Program Container","references": [{"url": reference_url}]}}
        REQUIRE_PUT = True
    else:
        # The reference is already in the ADP container, but we need to check to see if the reference has a tag called cve_prog_secretariat_snapshot
        # Safety check
        print (f"{reference_cve_id}: found reference {reference_url} is already in the ADP container")
        if old_adp_container:
            print(f"{reference_cve_id}: found old_adp_container {json.dumps(old_adp_container)}")
            for oldref in old_adp_container["references"]:
                if oldref.get("url") == reference_url:
                    if "tags" in oldref:
                        if "x_transferred" in oldref["tags"]:
                            print(
                                f"{reference_cve_id}: found reference {reference_url} has tag x_transferred"
                            )
                            oldref["tags"].remove("x_transferred")
                            if len(oldref["tags"]) <= 0:
                                del oldref["tags"]
                            new_json_data = {"adpContainer": old_adp_container}    
                            REQUIRE_PUT = True
                            break
                    else:
                        print(f"{reference_cve_id}: found reference {reference_url} has no tags")
                        REQUIRE_PUT = False
                        break
        else:
            print("no old_adp_container")
    print (f"{reference_cve_id}: REQUIRE_PUT: {REQUIRE_PUT}")
    if REQUIRE_PUT:
        print(f"{reference_cve_id}: Doing PUT of ADP container {json.dumps(new_json_data)}")

        put_request = send_put_request(url_put, headers, new_json_data)
        print(f"put_request status {put_request.status_code}, {url_put}, {put_request.text}")
        if not put_request:
            print(f"Failed to PUT for {reference_cve_id} due to networking issues: Attempting to retry....")
            put_request = send_put_request(url_put, headers, new_json_data)
            if not put_request:
                print(f"Failed to PUT for {reference_cve_id} due to networking issues twice: Exiting....")
                sys.exit(1)

        put_request_status_code = put_request.status_code
        if put_request_status_code != 200:
            print(f"{reference_cve_id}: PUT status {str(put_request_status_code)} FAILED, attempting to retry....")
            put_request = send_put_request(url_put, headers, new_json_data)
            if not put_request or put_request.status_code != 200:
                print(f"{reference_cve_id}: PUT status {str(put_request_status_code)} FAILED Twice....Exiting")
                sys.exit(1)

        put_request_json_results = put_request.json()

        print(f"{reference_cve_id}: PUT status {str(put_request_status_code)}")
